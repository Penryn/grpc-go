// 版权所有 2015 gRPC 作者。
//
// 根据 Apache 许可证 2.0 版（“许可证”）许可；
// 除非遵守许可证，否则您不得使用此文件。
// 您可以在以下网址获取许可证副本：
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// 除非适用法律要求或书面同意，否则按“原样”分发的软件
// 不提供任何明示或暗示的担保或条件。
// 请参阅许可证了解管理权限和限制的具体语言。

syntax = "proto3";

option go_package = "google.golang.org/grpc/examples/route_guide/routeguide";
option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";

package routeguide;

// 服务器导出的接口。
service RouteGuide {
  // 一个简单的 RPC。
  //
  // 获取给定位置的特征。
  //
  // 如果给定位置没有特征，则返回一个名称为空的特征。
  rpc GetFeature(Point) returns (Feature) {}

  // 服务器到客户端的流式 RPC。
  //
  // 获取给定矩形内的可用特征。结果是流式传输的，而不是一次性返回的
  // （例如，在带有重复字段的响应消息中），因为矩形可能覆盖很大的区域并包含
  // 大量特征。
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // 客户端到服务器的流式 RPC。
  //
  // 接受在遍历的路线上一系列点，并在遍历完成时返回一个
  // RouteSummary。
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // 双向流式 RPC。
  //
  // 接受在遍历路线上发送的一系列 RouteNotes，
  // 同时接收其他 RouteNotes（例如来自其他用户）。
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// 点表示为 E7 表示法中的纬度-经度对
// （度数乘以 10**7 并四舍五入到最接近的整数）。
// 纬度应在 +/- 90 度范围内， 经度应在
// +/- 180 度范围内（包括端点）。
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// 一个纬度-经度矩形，表示为两个对角相对的点 "lo" 和 "hi"。
message Rectangle {
  // 矩形的一个角。
  Point lo = 1;

  // 矩形的另一个角。
  Point hi = 2;
}

// 特征是在给定点命名的某物。
//
// 如果无法命名特征，则名称为空。
message Feature {
  // 特征的名称。
  string name = 1;

  // 检测到特征的点。
  Point location = 2;
}

// RouteNote 是在给定点发送的消息。
message RouteNote {
  // 发送消息的位置。
  Point location = 1;

  // 要发送的消息。
  string message = 2;
}

// RouteSummary 是在响应 RecordRoute rpc 时接收的。
//
// 它包含接收到的单个点的数量，检测到的特征的数量，以及
// 作为每个点之间距离的累积和的总距离。
message RouteSummary {
  // 接收到的点的数量。
  int32 point_count = 1;

  // 在遍历路线上经过的已知特征的数量。
  int32 feature_count = 2;

  // 覆盖的距离（米）。
  int32 distance = 3;

  // 遍历的持续时间（秒）。
  int32 elapsed_time = 4;
}
